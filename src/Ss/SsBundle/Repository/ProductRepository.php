<?php

namespace Ss\SsBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Ss\SsBundle\Entity\Product;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
	public function getProductList()
	{
		$qb = $this->createQueryBuilder('p')
		->where('p.is_publish = :is')
		->setParameter('is',1)
		->orderBy('p.created_at', 'DESC');
		$query = $qb->getQuery();
		
		return $query;
	}
	
	public function getGenderAll($id = null, $category = null, $other = null, $p = null)
	{
		$em = $this->getEntityManager();
		$query = $em->createQueryBuilder();
		$query->select(array ('c', 'p'))
		->from('SsSsBundle:Product', 'p')
		->leftJoin('p.categories', 'c')
		->where('p.is_publish = :is')
		->setParameter('is',1);
		if($id){
		$query->andWhere('c.gender = :gen')
		->setParameter('gen', $id);
		}
		
		if($category){
		$query->andWhere('p.categories = :cat')
		->setParameter('cat', $category);
		}
		
		$query->orderBy('p.created_at', 'DESC');
		
		if($other){
		$query->setMaxResults(3)
		->andWhere('p.id != :p')
		->setParameter('p', $p);
		$query = $query->getQuery()->getResult();
		}else{
			$query = $query->getQuery();
			}
			
		return $query;
	}
	
	public function getForLuceneQuery($query)
    {
        $hits = Product::getLuceneIndex()->find($query);
 
        $pks = array();
        foreach ($hits as $hit)
        {
          $pks[] = $hit->pk;
        }
 
        if (empty($pks))
        {
          return array();
        }
 
        $q = $this->createQueryBuilder('j')
            ->where('j.id IN (:pks)')
            ->setParameter('pks', $pks)
            ->andWhere('j.is_publish = :active')
            ->setParameter('active', 1)
            ->setMaxResults(20)
            ->getQuery();
 
        return $q->getResult();
    }
}
